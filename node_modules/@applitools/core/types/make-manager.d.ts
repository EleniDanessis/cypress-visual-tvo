import type { Core, EyesManager, Batch } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecType, type SpecDriver } from '@applitools/driver';
type Options<TSpec extends SpecType> = {
    spec?: SpecDriver<TSpec>;
    concurrency?: number;
    core: Core<TSpec>;
    base?: BaseCore;
    agentId?: string;
    cwd?: string;
    logger: Logger;
};
export declare function makeMakeManager<TSpec extends SpecType>({ spec, concurrency: defaultConcurrency, core, base, agentId: defaultAgentId, cwd, logger: defaultLogger, }: Options<TSpec>): <TType extends "classic" | "ufg" = "classic">({ type, concurrency, legacyConcurrency, batch, agentId, logger, }?: {
    type?: TType | undefined;
    concurrency?: number | undefined;
    /** @deprecated */
    legacyConcurrency?: number | undefined;
    batch?: Batch | undefined;
    agentId?: string | undefined;
    logger?: Logger | undefined;
}) => Promise<EyesManager<TSpec, TType>>;
export {};
